{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALIJ\\\\Desktop\\\\EST\\\\deploiement\\\\api-server\\\\client\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from the API\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const response = await fetch('http://localhost:5000/api/tasks');\n      const data = await response.json();\n      setTasks(data);\n    };\n    fetchTasks();\n  }, []);\n  const handleTaskDelete = async id => {\n    const response = await fetch(`http://localhost:5000/api/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      setTasks(tasks.filter(task => task.id !== id));\n    } else {\n      console.error('Failed to delete task');\n    }\n  };\n  const handleTaskComplete = async id => {\n    const response = await fetch(`http://localhost:5000/api/tasks/${id}/toggle`, {\n      method: 'PUT'\n    });\n    if (response.ok) {\n      const updatedTasks = tasks.map(task => task.id === id ? {\n        ...task,\n        completed: !task.completed\n      } : task);\n      setTasks(updatedTasks);\n    } else {\n      console.error('Failed to update task status');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onTaskDelete: handleTaskDelete,\n      onTaskComplete: handleTaskComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskManager, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useEffect","useState","TaskList","jsxDEV","_jsxDEV","TaskManager","_s","tasks","setTasks","fetchTasks","response","fetch","data","json","handleTaskDelete","id","method","ok","filter","task","console","error","handleTaskComplete","updatedTasks","map","completed","className","children","onTaskDelete","onTaskComplete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ALIJ/Desktop/EST/deploiement/api-server/client/src/components/TaskList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport TaskList from './TaskList';\r\n\r\nconst TaskManager = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Fetch tasks from the API\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      const response = await fetch('http://localhost:5000/api/tasks');\r\n      const data = await response.json();\r\n      setTasks(data);\r\n    };\r\n\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const handleTaskDelete = async (id) => {\r\n    const response = await fetch(`http://localhost:5000/api/tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (response.ok) {\r\n      setTasks(tasks.filter(task => task.id !== id));\r\n    } else {\r\n      console.error('Failed to delete task');\r\n    }\r\n  };\r\n\r\n  const handleTaskComplete = async (id) => {\r\n    const response = await fetch(`http://localhost:5000/api/tasks/${id}/toggle`, {\r\n      method: 'PUT',\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedTasks = tasks.map(task =>\r\n        task.id === id ? { ...task, completed: !task.completed } : task\r\n      );\r\n      setTasks(updatedTasks);\r\n    } else {\r\n      console.error('Failed to update task status');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-manager\">\r\n      <TaskList tasks={tasks} onTaskDelete={handleTaskDelete} onTaskComplete={handleTaskComplete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskManager;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,QAAQ,CAACI,IAAI,CAAC;IAChB,CAAC;IAEDH,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,gBAAgB,GAAG,MAAOC,EAAE,IAAK;IACrC,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCI,EAAE,EAAE,EAAE;MACpEC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIN,QAAQ,CAACO,EAAE,EAAE;MACfT,QAAQ,CAACD,KAAK,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,CAAC;IAChD,CAAC,MAAM;MACLK,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACxC;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOP,EAAE,IAAK;IACvC,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCI,EAAE,SAAS,EAAE;MAC3EC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIN,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMM,YAAY,GAAGhB,KAAK,CAACiB,GAAG,CAACL,IAAI,IACjCA,IAAI,CAACJ,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGI,IAAI;QAAEM,SAAS,EAAE,CAACN,IAAI,CAACM;MAAU,CAAC,GAAGN,IAC7D,CAAC;MACDX,QAAQ,CAACe,YAAY,CAAC;IACxB,CAAC,MAAM;MACLH,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;IAC/C;EACF,CAAC;EAED,oBACEjB,OAAA;IAAKsB,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BvB,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAACqB,YAAY,EAAEd,gBAAiB;MAACe,cAAc,EAAEP;IAAmB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3F,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA9CID,WAAW;AAAA6B,EAAA,GAAX7B,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}