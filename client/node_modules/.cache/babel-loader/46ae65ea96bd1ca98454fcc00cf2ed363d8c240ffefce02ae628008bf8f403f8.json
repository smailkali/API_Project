{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const taskService = {\n  getAllTasks: async () => {\n    try {\n      const response = await apiClient.get('/tasks');\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      throw error;\n    }\n  },\n  createTask: async taskData => {\n    try {\n      const response = await apiClient.post('/tasks', taskData);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la création de la tâche:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","taskService","getAllTasks","response","get","data","console","createTask","taskData","post"],"sources":["C:/Users/ALIJ/Desktop/EST/deploiement/api-server/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Intercepteur pour ajouter le token\r\napiClient.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\nexport const taskService = {\r\n  getAllTasks: async () => {\r\n    try {\r\n      const response = await apiClient.get('/tasks');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des tâches:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  createTask: async (taskData) => {\r\n    try {\r\n      const response = await apiClient.post('/tasks', taskData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de la tâche:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,SAAS,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAC/B,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMpB,SAAS,CAACqB,GAAG,CAAC,QAAQ,CAAC;MAC9C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAEDS,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMpB,SAAS,CAAC0B,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;MACzD,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}